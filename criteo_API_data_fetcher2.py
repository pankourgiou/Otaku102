#x = "import argparse import csv import logging import os from datetime import datetime, timedelta from criteo_tables import session, criteo_accounts, CriteoCampaigns, CriteoCampaignCosts from pycriteo import Client CSV_PATH = '/opt/output/python_scripts_fo/criteo/'"
#x1 = "logger = logging.getLogger('get_criteo_campaign_data') logger.setLevel(logging.INFO) handler = logging.StreamHandler() handler.setLevel(logging.INFO) formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s') handler.setFormatter(formatter) logger.addHandler(handler) logger.propagate = False"
#x2 = "def load_campaigns(client, country_code): logger.info('fetching basic campaign data for %s' % country_code) currency = dict(client.getAccount())['currency'] campaigns = client.getCampaigns({}) for row in campaigns.campaign: campaign_data = CriteoCampaigns(campaign_id=row['campaignID'], campaign_name=row['campaignName'], campaign_status=row['status'], country_code=country_code, currency_code=currency) session.merge(campaign_data) session.commit()"
#x3 = "def load_campaign_costs(client, country_code, from_date, to_date):logger.info('fetching campaign cost data for %s for the time interval [%s, %s]' % (country_code, from_date, to_date)) job = client.scheduleReportJob( {'reportType': 'Campaign', 'startDate': from_date, 'endDate': to_date, 'isResultGzipped': False, 'aggregationType': 'Daily' } ) filename = CSV_PATH + 'criteo_%s.csv' % country_code client.downloadReport(job.jobID, filename)"
#x4 = "  input_file = open(filename) campaign_results = csv.DictReader(input_file) for row in campaign_results: cost_data = CriteoCampaignCosts(campaign_id=row['campaignID'], campaign_date=row['dateTime'], clicks=row['click'], impressions=row['impressions'], ctr=row['CTR'], rev_cpc=row['revcpc'], ecpm=row['ecpm'], cost=row['cost'] sales=row['sales'], conv_rate=row['convRate'], order_value=row['orderValue'], sales_post_view=row['salesPostView'], conv_rate_post_view=row['convRatePostView'], order_value_post_view=row['orderValuePostView'], cost_of_sale=row['costOfSale'], overall_competition_win=row['overallCompetitionWin'], cost_per_order=row['costPerOrder'])"
#x5 = "session.merge(cost_data) session.commit() input_file.close() os.remove(filename) def load_data(countries, from_date, to_date): if countries == 'all': accounts = criteo_accounts else: country_list = [c.upper().strip() for c in countries.split(',')] accounts = {k: v for k, v in criteo_accounts.items() if k in country_list} for country_code, credentials in accounts.items(): client = Client(*credentials) load_campaigns(client, country_code) load_campaign_costs(client, country_code, from_date, to_date) logger.info('completed fetching data for %s\n' % country_code)"
#x6 = "def get_default_dates(): yesterday = datetime.today().date() - timedelta(days=1) res = session.execute(SELECT COALESCE(MAX(campaign_date), now()::DATE) AS max_date FROM criteo.criteo_campaign_costs).fetchone() max_fetched_date = res['max_date'] def_start = str((min(max_fetched_date, yesterday) - timedelta(days=2)).strftime('%Y-%m-%d')) def_end = str(yesterday.strftime('%Y-%m-%d')) return def_start, def_end"
#x7 = "if __name__ == '__main__': (default_start, default_end) = get_default_dates() parser = argparse.ArgumentParser(description='Fetch data about campaigns and their costs from the Criteo API and load it into the DWH.') parser.add_argument('-s', '--start', default=default_start, help='the start date on which the data should be fetched') parser.add_argument('-e', '--end', default=default_end, help='the end date on which the data should be fetched') parser.add_argument('-c', '--countries', default='all', help='choose for which country(ies) to fetch and load data, default is all') args = parser.parse_args() if datetime.strptime(args.end, '%Y-%m-%d') - datetime.strptime(args.start, '%Y-%m-%d') >= timedelta(days=90): logger.error('The time window for the daily aggregation of campaign results is limited to 90 days') load_data(countries=args.countries, from_date=args.start, to_date=args.end)"

#print(bool(x1))
#print(bool(x2))
#print(bool(x2))
#print(bool(x3))
#print(bool(x4))
#print(bool(x5))
#print(bool(x6))
#print(bool(x7))
